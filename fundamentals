import React, { useState } from 'react';
import { View, Text, TextInput, StyleSheet, Button, ScrollView } from 'react-native';

export default function App() {
  const [income, setIncome] = useState('');
  const [debts, setDebts] = useState('');
  const [expenses, setExpenses] = useState('');
  const [downPayment, setDownPayment] = useState('');
  const [interestRate, setInterestRate] = useState('');
  const [termYears, setTermYears] = useState('');
  const [homePrice, setHomePrice] = useState(null);

  const calculateHomePrice = () => {
    const annualIncome = parseFloat(income);
    const monthlyIncome = annualIncome / 12;
    const monthlyDebts = parseFloat(debts);
    const expensesVal = parseFloat(expenses);
    const down = parseFloat(downPayment);
    const rate = parseFloat(interestRate) / 100 / 12;
    const n = parseInt(termYears) * 12;
    const maxTotalDebt = monthlyIncome * 0.45;
    const maxHousingPayment = maxTotalDebt - monthlyDebts;
    const mortgageBudget = maxHousingPayment - expensesVal;

    const loanAmount = mortgageBudget * ((Math.pow(1 + rate, n) - 1) / (rate * Math.pow(1 + rate, n)));
    const estimatedPrice = loanAmount + down;

    setHomePrice(Math.round(estimatedPrice));
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.header}>🏡 My Dream Home Budget</Text>

      <TextInput style={styles.input} placeholder="Annual Income" keyboardType="numeric" onChangeText={setIncome} value={income} />
      <TextInput style={styles.input} placeholder="Monthly Debts (e.g. car loan)" keyboardType="numeric" onChangeText={setDebts} value={debts} />
      <TextInput style={styles.input} placeholder="Monthly Taxes, Insurance, HOA" keyboardType="numeric" onChangeText={setExpenses} value={expenses} />
      <TextInput style={styles.input} placeholder="Down Payment" keyboardType="numeric" onChangeText={setDownPayment} value={downPayment} />
      <TextInput style={styles.input} placeholder="Interest Rate (e.g. 7)" keyboardType="numeric" onChangeText={setInterestRate} value={interestRate} />
      <TextInput style={styles.input} placeholder="Loan Term in Years (e.g. 30)" keyboardType="numeric" onChangeText={setTermYears} value={termYears} />

      <Button title="Calculate Home Price" onPress={calculateHomePrice} />

      {homePrice !== null && (
        <View style={styles.resultBox}>
          <Text style={styles.resultText}>🏠 Estimated Max Home Price: ${homePrice.toLocaleString()}</Text>
        </View>
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { padding: 20, marginTop: 40 },
  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 20 },
  input: {
    borderWidth: 1,
    borderColor: '#aaa',
    borderRadius: 8,
    padding: 12,
    marginBottom: 12,
    fontSize: 16,
  },
  resultBox: {
    marginTop: 20,
    padding: 16,
    backgroundColor: '#e8f5e9',
    borderRadius: 8,
  },
  resultText: {
    fontSize: 20,
    color: '#2e7d32',
    fontWeight: 'bold',
  },
});

// App.js
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Button,
  ScrollView,
  Switch,
} from 'react-native';

export default function App() {
  const [income, setIncome] = useState('');
  const [debts, setDebts] = useState('');
  const [expenses, setExpenses] = useState('');
  const [downPayment, setDownPayment] = useState('');
  const [interestRate, setInterestRate] = useState('');
  const [termYears, setTermYears] = useState('');
  const [homePrice, setHomePrice] = useState(null);
  const [noStairs, setNoStairs] = useState(false);
  const [withGarage, setWithGarage] = useState(false);
  const [mustHaveFireplace, setMustHaveFireplace] = useState(false);

  const calculateHomePrice = () => {
    const annualIncome = parseFloat(income);
    const monthlyIncome = annualIncome / 12;
    const monthlyDebts = parseFloat(debts);
    const expensesVal = parseFloat(expenses);
    const down = parseFloat(downPayment);
    const rate = parseFloat(interestRate) / 100 / 12;
    const n = parseInt(termYears) * 12;
    const maxTotalDebt = monthlyIncome * 0.45;
    const maxHousingPayment = maxTotalDebt - monthlyDebts;
    const mortgageBudget = maxHousingPayment - expensesVal;

    const loanAmount = mortgageBudget * ((Math.pow(1 + rate, n) - 1) / (rate * Math.pow(1 + rate, n)));
    const estimatedPrice = loanAmount + down;

    setHomePrice(Math.round(estimatedPrice));
  };

  const renderFilters = () => (
    <View style={styles.filterBox}>
      <Text style={styles.filterHeader}>Home Preferences</Text>

      <View style={styles.switchRow}>
        <Text style={styles.label}>No Stairs</Text>
        <Switch value={noStairs} onValueChange={setNoStairs} />
      </View>

      <View style={styles.switchRow}>
        <Text style={styles.label}>With Garage</Text>
        <Switch value={withGarage} onValueChange={setWithGarage} />
      </View>

      <View style={styles.switchRow}>
        <Text style={styles.label}>Must Have Fireplace</Text>
        <Switch value={mustHaveFireplace} onValueChange={setMustHaveFireplace} />
      </View>
    </View>
  );

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.header}>🏡 My Dream Home Budget</Text>

      <TextInput style={styles.input} placeholder="Annual Income" keyboardType="numeric" onChangeText={setIncome} value={income} />
      <TextInput style={styles.input} placeholder="Monthly Debts" keyboardType="numeric" onChangeText={setDebts} value={debts} />
      <TextInput style={styles.input} placeholder="Monthly Taxes, Insurance, HOA" keyboardType="numeric" onChangeText={setExpenses} value={expenses} />
      <TextInput style={styles.input} placeholder="Down Payment" keyboardType="numeric" onChangeText={setDownPayment} value={downPayment} />
      <TextInput style={styles.input} placeholder="Interest Rate (%)" keyboardType="numeric" onChangeText={setInterestRate} value={interestRate} />
      <TextInput style={styles.input} placeholder="Loan Term (Years)" keyboardType="numeric" onChangeText={setTermYears} value={termYears} />

      {renderFilters()}

      <Button title="Calculate Home Price" onPress={calculateHomePrice} />

      {homePrice !== null && (
        <View style={styles.resultBox}>
          <Text style={styles.resultText}>🏠 Estimated Max Home Price: ${homePrice.toLocaleString()}</Text>
          <Text style={styles.resultNote}>Filtered Preferences:</Text>
          <Text>- {noStairs ? '✔' : '✘'} No Stairs</Text>
          <Text>- {withGarage ? '✔' : '✘'} With Garage</Text>
          <Text>- {mustHaveFireplace ? '✔' : '✘'} Must Have Fireplace</Text>
        </View>
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { padding: 20, marginTop: 40, backgroundColor: '#f9fafb' },
  header: { fontSize: 28, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 12,
    padding: 14,
    marginBottom: 14,
    fontSize: 16,
    backgroundColor: '#fff'
  },
  resultBox: {
    marginTop: 24,
    padding: 20,
    backgroundColor: '#e0f7e9',
    borderRadius: 14,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 3,
  },
  resultText: {
    fontSize: 22,
    color: '#2e7d32',
    fontWeight: 'bold',
    marginBottom: 10,
  },
  resultNote: {
    fontSize: 16,
    fontWeight: '600',
    marginTop: 10,
  },
  filterBox: {
    padding: 16,
    backgroundColor: '#f0f4ff',
    borderRadius: 12,
    marginBottom: 20,
  },
  filterHeader: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  switchRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  label: {
    fontSize: 16,
  },
});
'X-RapidAPI-Key': 'YOUR_EREAPI_KEY_H065c83385emsh116c3b63941c0c1p1acf6ejsnac64eca9fa8e',

// App.js
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  Button,
  ScrollView,
  Switch,
  Image,
  TouchableOpacity,
} from 'react-native';

export default function App() {
  const [income, setIncome] = useState('');
  const [debts, setDebts] = useState('');
  const [expenses, setExpenses] = useState('');
  const [downPayment, setDownPayment] = useState('');
  const [interestRate, setInterestRate] = useState('');
  const [termYears, setTermYears] = useState('');
  const [city, setCity] = useState('Miami');
  const [stateCode, setStateCode] = useState('FL');
  const [homePrice, setHomePrice] = useState(null);
  const [noStairs, setNoStairs] = useState(false);
  const [withGarage, setWithGarage] = useState(false);
  const [mustHaveFireplace, setMustHaveFireplace] = useState(false);
  const [listings, setListings] = useState([]);
  const [favorites, setFavorites] = useState([]);

  const toggleFavorite = (listing) => {
    setFavorites((prev) => {
      const exists = prev.find((f) => f.property_id === listing.property_id);
      if (exists) {
        return prev.filter((f) => f.property_id !== listing.property_id);
      } else {
        return [...prev, listing];
      }
    });
  };

  const fetchListings = async (budget) => {
    const options = {
      method: 'GET',
      headers: {
        'X-RapidAPI-Key': 'YOUR_API_KEY_HERE',
        'X-RapidAPI-Host': 'realtor.p.rapidapi.com',
      },
    };

    const url = `https://realtor.p.rapidapi.com/properties/v2/list-for-sale?city=${city}&state_code=${stateCode}&limit=10&offset=0&sort=relevance&price_max=${budget}`;

    try {
      const response = await fetch(url, options);
      const data = await response.json();
      const filtered = (data.properties || []).filter((home) => {
        const tags = (home.tags || []).map((tag) => tag.toLowerCase());
        const featuresMatch =
          (!withGarage || tags.includes('garage')) &&
          (!mustHaveFireplace || tags.includes('fireplace')) &&
          (!noStairs || tags.includes('single_story'));
        return featuresMatch;
      });
      setListings(filtered);
    } catch (error) {
      console.error('Error fetching listings:', error);
    }
  };

  const calculateHomePrice = () => {
    const annualIncome = parseFloat(income);
    const monthlyIncome = annualIncome / 12;
    const monthlyDebts = parseFloat(debts);
    const expensesVal = parseFloat(expenses);
    const down = parseFloat(downPayment);
    const rate = parseFloat(interestRate) / 100 / 12;
    const n = parseInt(termYears) * 12;
    const maxTotalDebt = monthlyIncome * 0.45;
    const maxHousingPayment = maxTotalDebt - monthlyDebts;
    const mortgageBudget = maxHousingPayment - expensesVal;

    const loanAmount = mortgageBudget * ((Math.pow(1 + rate, n) - 1) / (rate * Math.pow(1 + rate, n)));
    const estimatedPrice = loanAmount + down;

    const roundedPrice = Math.round(estimatedPrice);
    setHomePrice(roundedPrice);
    fetchListings(roundedPrice);
  };

  const renderFilters = () => (
    <View style={styles.filterBox}>
      <Text style={styles.filterHeader}>Search Filters</Text>
      <TextInput style={styles.input} placeholder="City" onChangeText={setCity} value={city} />
      <TextInput style={styles.input} placeholder="State Code (e.g., FL)" onChangeText={setStateCode} value={stateCode} />

      <View style={styles.switchRow}>
        <Text style={styles.label}>No Stairs</Text>
        <Switch value={noStairs} onValueChange={setNoStairs} />
      </View>

      <View style={styles.switchRow}>
        <Text style={styles.label}>With Garage</Text>
        <Switch value={withGarage} onValueChange={setWithGarage} />
      </View>

      <View style={styles.switchRow}>
        <Text style={styles.label}>Must Have Fireplace</Text>
        <Switch value={mustHaveFireplace} onValueChange={setMustHaveFireplace} />
      </View>
    </View>
  );

  const renderListings = () => (
    <View style={{ marginTop: 20 }}>
      <Text style={styles.filterHeader}>Listings in Your Budget</Text>
      {listings.map((listing, index) => (
        <View key={index} style={styles.listingCard}>
          {listing.primary_photo?.href && (
            <Image source={{ uri: listing.primary_photo.href }} style={styles.listingImage} />
          )}
          <Text style={styles.listingText}>{listing.prop_type} - {listing.address.city}, {listing.address.state_code}</Text>
          <Text style={styles.listingPrice}>${listing.price.toLocaleString()}</Text>
          <TouchableOpacity onPress={() => toggleFavorite(listing)}>
            <Text style={{ color: '#1e88e5', marginTop: 6 }}>
              {favorites.some(f => f.property_id === listing.property_id) ? '★ Remove from Favorites' : '☆ Add to Favorites'}
            </Text>
          </TouchableOpacity>
        </View>
      ))}
    </View>
  );

  const renderFavorites = () => (
    <View style={{ marginTop: 30 }}>
      <Text style={styles.filterHeader}>⭐ Favorites</Text>
      {favorites.map((fav, index) => (
        <View key={index} style={styles.listingCard}>
          <Text style={styles.listingText}>{fav.prop_type} - {fav.address.city}, {fav.address.state
        
        AsyncStorage
        npx expo install @react-native-async-storage/async-storage

        import AsyncStorage from '@react-native-async-storage/async-storage';
import { useEffect } from 'react';
useEffect(() => {
  const loadFavorites = async () => {
    const saved = await AsyncStorage.getItem('favorites');
    if (saved) setFavorites(JSON.parse(saved));
  };
  loadFavorites();
}, []);

useEffect(() => {
  AsyncStorage.setItem('favorites', JSON.stringify(favorites));
}, [favorites]);
